package service;


import org.json.JSONException;
import org.json.JSONObject;


import tools.ServicesTools;
import tools.UserTools;

public class User {
	
	public User() {
		
	}
	
	public static JSONObject createUser(String login, String mdp, String nom, String prenom, String email) {
		if (login == null || mdp == null || nom == null || prenom == null || email == null) {
			return ServicesTools.serviceRefused("arguments manquants","-1");
			}
		
		//tester si login deja utilise
		if(UserTools.userExists(login))
			return ServicesTools.serviceRefused("Login deja existant", "-2");
		
		/*
		 * TODO
		 * inserer user dans la BD 
		 */
		return UserTools.addUser(login, mdp, nom, prenom, email);
		
	}
	
	//se connecter avec un compte existant
	public static JSONObject login(String login, String mdp) throws JSONException {
		if (login == null || mdp == null) {
			return ServicesTools.serviceRefused("argument manquant","-1");
		}
		
		boolean is_user = tools.UserTools.userExists(login);
		if(!is_user) {
			return ServicesTools.serviceRefused("Utilisateur inexistant","-2");
		}
		boolean mdp_ok = tools.UserTools.checkPasswd(login, mdp);
		if(!is_user) {
			return ServicesTools.serviceRefused("Utilisateur inexistant","-2");
		}
		
		return tools.UserTools.loginUser(login,mdp);
	}
	
	
	public static JSONObject logOut(String login, String mdp) {
		if (login == null || mdp == null) {
			return ServicesTools.serviceRefused("argument manquant","-1");
		}
		
		boolean is_connected = tools.UserTools.isConnected(login);
		if(!is_connected) {
				return ServicesTools.serviceAccepted("User deja deconnect√©","-1");
			
		}
		
		return tools.UserTools.logOutUser(login,mdp);
		
	}
}